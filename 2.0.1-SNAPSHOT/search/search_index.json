{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#charts-201-snapshot","title":"Charts 2.0.1-SNAPSHOT","text":"<p>Welcome to the Charts documentation! This library provides a simple way to create beautiful charts in Kotlin Multiplatform applications.</p>"},{"location":"index.html#whats-new-in-this-version","title":"What's New in this version","text":""},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>New to Charts? Check out our Getting Started Guide to learn how to integrate the library into your project and create your first charts in minutes.</p>"},{"location":"index.html#interactive-js-demo","title":"Interactive JS Demo","text":"<p>Explore the capabilities of Charts library with our interactive demo. This live showcase demonstrates all chart types and customization options available in the current version.</p>          Try Interactive Demo"},{"location":"index.html#documentation","title":"Documentation","text":"<ul> <li>API Documentation - Detailed API reference</li> <li>Interactive Demo - Explore all chart types and customization options</li> <li>Examples - Code samples</li> <li>Example Project</li> </ul>"},{"location":"examples.html","title":"Code Examples","text":""},{"location":"examples.html#basic-usage","title":"Basic Usage","text":""},{"location":"examples.html#pie-chart","title":"Pie Chart","text":"<pre><code>@Composable\nprivate fun AddDefaultPieChart() {\n    val dataSet = listOf(8.0f, 23.0f, 54.0f, 32.0f, 12.0f, 37.0f, 7.0f, 23.0f, 43.0f)\n        .toChartDataSet(\n            title = stringResource(R.string.pie_chart),\n            postfix = \" \u00b0C\"\n        )\n    PieChart(dataSet)\n}\n</code></pre> <p>Pie Chart with default styling</p>"},{"location":"examples.html#line-chart","title":"Line Chart","text":"<pre><code>@Composable\nprivate fun AddDefaultLineChart() {\n    val dataSet = listOf(\n        8f, 23f, 54f, 32f, 12f, 37f, 7f, 23f, 43f\n    ).toChartDataSet(\n        title = stringResource(R.string.line_chart)\n    )\n    LineChart(dataSet)\n}\n</code></pre> <p>Line Chart with default styling</p>"},{"location":"examples.html#multiline-chart","title":"MultiLine Chart","text":"<pre><code>@Composable\nprivate fun AddDefaultMultiLineChart() {\n    val items = listOf(\n        \"Cherry St.\" to listOf(26000.68f, 28000.34f, 32000.57f, 45000.57f),\n        \"Strawberry Mall\" to listOf(15261.68f, 17810.34f, 40000.57f, 85000f),\n        \"Lime Av.\" to listOf(4000.87f, 5000.58f, 30245.81f, 135000.58f),\n        \"Apple Rd.\" to listOf(1000.87f, 9000.58f, 16544.81f, 100444.87f)\n    )\n\n    val dataSet = items.toMultiChartDataSet(\n        title = stringResource(R.string.line_chart),\n        prefix = \"$\",\n        categories = listOf(\"Jan\", \"Feb\", \"Mar\", \"Apr\")\n    )\n\n    LineChart(dataSet)\n}\n</code></pre> <p>MultiLine Chart with default styling</p>"},{"location":"examples.html#bar-chart","title":"Bar Chart","text":"<pre><code>@Composable\nprivate fun AddDefaultBarChart() {\n    BarChart(\n        dataSet = listOf(100f, 50f, 5f, 60f, -50f, 50f, 60f)\n            .toChartDataSet(\n                title = stringResource(R.string.bar_chart),\n                prefix = \"$\"\n        )\n    )\n}\n</code></pre> <p>Bar Chart with default styling</p>"},{"location":"examples.html#stacked-bar-chart","title":"Stacked Bar Chart","text":"<pre><code>@Composable\nprivate fun AddDefaultStackedBarChart() {\n    val items = listOf(\n        \"Cherry St.\" to listOf(8261.68f, 8810.34f, 30000.57f),\n        \"Strawberry Mall\" to listOf(8261.68f, 8810.34f, 30000.57f),\n        \"Lime Av.\" to listOf(1500.87f, 2765.58f, 33245.81f),\n        \"Apple Rd.\" to listOf(5444.87f, 233.58f, 67544.81f)\n    )\n\n    val dataSet = items.toMultiChartDataSet(\n        title = stringResource(R.string.bar_chart),\n        prefix = \"$\",\n        categories = listOf(\"Jan\", \"Feb\", \"Mar\")\n    )\n\n    StackedBarChart(dataSet)\n}\n</code></pre> <p>Stacked Bar Chart with default styling</p>"},{"location":"examples.html#customizing-chart-styles","title":"Customizing Chart Styles","text":"<p>Each chart type has a <code>Defaults.style()</code> method that allows you to customize its appearance:</p>"},{"location":"examples.html#pie-chart_1","title":"Pie Chart","text":"<pre><code>@Composable\nprivate fun AddCustomPieChart() {\n    val pieColors = listOf(\n        navyBlue, darkBlue, deepPurple, magenta, darkPink, coral, orange, yellow\n    )\n\n    val style = PieChartDefaults.style(\n        borderColor = Color.White,\n        donutPercentage = 40f,\n        borderWidth = 6f,\n        pieColors = pieColors,\n        chartViewStyle = ChartViewDemoStyle.custom(width = 200.dp)\n    )\n\n    val dataSet = listOf(8, 23, 54, 32, 12, 37, 7, 23, 43)\n        .toChartDataSet(\n            title = stringResource(R.string.pie_chart),\n            postfix = \" \u00b0C\"\n        )\n\n    PieChart(dataSet = dataSet, style = style)\n}\n</code></pre> <p>Pie Chart with custom styling</p>"},{"location":"examples.html#line-chart_1","title":"Line Chart","text":"<pre><code>@Composable\nprivate fun AddCustomLineChart() {\n    val style = LineChartDefaults.style(\n        lineColor = ColorPalette.DataColor.deepPurple,\n        pointColor = ColorPalette.DataColor.magenta,\n        pointSize = 9f,\n        bezier = false,\n        dragPointColor = ColorPalette.DataColor.deepPurple,\n        dragPointVisible = false,\n        dragPointSize = 8f,\n        dragActivePointSize = 15f,\n        chartViewStyle = ChartViewDemoStyle.custom(width = 200.dp)\n    )\n\n    val dataSet = listOf(\"10\", \"100\", \"20\", \"50\", \"150\", \"70\", \"10\", \"20\", \"40\")\n        .toChartDataSet(\n            title = stringResource(R.string.line_chart)\n        )\n\n    LineChart(dataSet = dataSet, style = style)\n}\n</code></pre> <p>Line Chart with custom styling</p>"},{"location":"examples.html#multiline-chart_1","title":"MultiLine Chart","text":"<pre><code>@Composable\nprivate fun AddCustomMultiLineChart() {\n    val lineColors = listOf(\n        navyBlue, darkBlue, deepPurple, magenta\n    )\n    val style = LineChartDefaults.style(\n        lineColors = lineColors,\n        dragPointVisible = false,\n        pointVisible = true,\n        pointColor = ColorPalette.DataColor.magenta,\n        dragPointColor = deepPurple,\n        chartViewStyle = ChartViewDemoStyle.custom()\n    )\n\n    val items = listOf(\n        \"Cherry St.\" to listOf(26000.68f, 28000.34f, 32000.57f, 45000.57f),\n        \"Strawberry Mall\" to listOf(15261.68f, 17810.34f, 40000.57f, 85000f),\n        \"Lime Av.\" to listOf(4000.87f, 5000.58f, 30245.81f, 135000.58f),\n        \"Apple Rd.\" to listOf(1000.87f, 9000.58f, 16544.81f, 100444.87f)\n    )\n\n    val dataSet = items.toMultiChartDataSet(\n        title = stringResource(R.string.line_chart),\n        prefix = \"$\",\n        categories = listOf(\"Jan\", \"Feb\", \"Mar\", \"Apr\")\n    )\n\n    LineChart(dataSet = dataSet, style = style)\n}\n</code></pre> <p>MultiLine Chart with custom styling</p>"},{"location":"examples.html#bar-chart_1","title":"Bar Chart","text":"<pre><code>@Composable\nprivate fun AddCustomBarChart() {\n    val style = BarChartDefaults.style(\n        barColor = ColorPalette.DataColor.deepPurple,\n        space = 12.dp,\n        chartViewStyle = ChartViewDemoStyle.custom(width = 200.dp)\n    )\n\n    BarChart(\n        dataSet = listOf(100f, 50f, 5f, 60f, 1f, 30f, 50f, 35f, 50f, -100f)\n            .toChartDataSet(title = stringResource(R.string.bar_chart)),\n        style = style\n    )\n}\n</code></pre> <p>Bar Chart with custom styling</p>"},{"location":"examples.html#stacked-bar-chart_1","title":"Stacked Bar Chart","text":"<pre><code>@Composable\nprivate fun AddCustomStackedBarChart() {\n    val colors = listOf(navyBlue, darkBlue, deepPurple)\n    val style =  StackedBarChartDefaults.style(\n        barColors = colors,\n        chartViewStyle = ChartViewDemoStyle.custom(width = 240.dp)\n    )\n\n    val items = listOf(\n        \"Cherry St.\" to listOf(8261.68f, 8810.34f, 30000.57f),\n        \"Strawberry Mall\" to listOf(8261.68f, 8810.34f, 30000.57f),\n        \"Lime Av.\" to listOf(1500.87f, 2765.58f, 33245.81f),\n        \"Apple Rd.\" to listOf(5444.87f, 233.58f, 67544.81f)\n    )\n\n    val dataSet = items.toMultiChartDataSet(\n        title = stringResource(R.string.stacked_bar_chart),\n        prefix = \"$\",\n        categories = listOf(\"Jan\", \"Feb\", \"Mar\")\n    )\n\n    StackedBarChart(dataSet = dataSet, style = style)\n}\n</code></pre> <p>Stacked Bar Chart with custom styling</p>"},{"location":"examples.html#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Documentation for detailed information about all available options</li> <li>Try the Interactive Demo to see the charts in action</li> <li>Check out these examples for more advanced usage:<ul> <li>Pie Chart</li> <li>Line Chart</li> <li>Multiline Chart</li> <li>Bar Chart</li> <li>Stacked Bar Chart</li> </ul> </li> </ul>"},{"location":"getting-started.html","title":"Getting Started with Charts","text":"<p>This guide will help you integrate the Charts library into your Kotlin Multiplatform project.</p>"},{"location":"getting-started.html#installation","title":"Installation","text":""},{"location":"getting-started.html#core-dependency","title":"Core Dependency","text":"<p>Replace <code>&lt;version&gt;</code> with the latest version: </p> <pre><code>commonMain.dependencies {\n    implementation(\"io.github.dautovicharis:charts:&lt;version&gt;\")\n}\n\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre>"},{"location":"getting-started.html#platform-specific-dependencies","title":"Platform-Specific Dependencies","text":"<pre><code>implementation(\"io.github.dautovicharis:charts-android:&lt;version&gt;\") // For Android\nimplementation(\"io.github.dautovicharis:charts-jvm:&lt;version&gt;\")     // For JVM\nimplementation(\"io.github.dautovicharis:charts-js:&lt;version&gt;\")      // For JavaScript\nimplementation(\"io.github.dautovicharis:charts-iosx64:&lt;version&gt;\")  // For iOS (x64)\nimplementation(\"io.github.dautovicharis:charts-iosarm64:&lt;version&gt;\") // For iOS (ARM64)\n</code></pre>"},{"location":"getting-started.html#snapshot-builds","title":"Snapshot Builds","text":"<p>Access the latest pre-release builds through the Sonatype snapshots repository. Snapshots contain the most recent features and fixes that haven't been officially released yet, allowing you to test upcoming functionality. <pre><code>commonMain.dependencies {\n    implementation(\"io.github.dautovicharis:charts:&lt;snapshot-version&gt;\")\n}\n\ndependencyResolutionManagement {\n    repositories {\n    // Sonatype Central Portal Snapshots (replaces old s01.oss.sonatype.org)\n    maven(\"https://central.sonatype.com/repository/maven-snapshots/\")\n    }\n}\n</code></pre></p>"},{"location":"getting-started.html#next-steps","title":"Next Steps","text":"<ul> <li>Code Examples - Learn how to create and customize different chart types with detailed code samples.</li> </ul>"}]}